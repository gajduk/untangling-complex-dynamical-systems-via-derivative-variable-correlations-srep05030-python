import numpy as np
import math

from srep05030_network_reconstruction import network_reconstruction


def example1():

	#----------------------------------------
	#The connection matrix as shown in Figure 1a of the paper
	#----------------------------------------
	A0 = [[0,7.2,9.3,0,0,-1],[-1,0,7,0,0,0],[-3,4.2,-3.5,-4.4,0,0],[8.5,6.7,-7.7,0,-9,0],[-5,0,0,0,0,0],[0,2.5,0,10,-2.5,0]]

	#----------------------------------------
	#This is the original time series data Figure 2, note that the initial conditions are randomly generated (from a normal distribution) so some of the values may vary
	#----------------------------------------
	t = [0.0,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2,3.4,3.6,3.8,4.0]
	x = [[-0.12389172666, 0.587579759577, -0.311814570479, -0.414858833614, -0.0738960295328, -0.660661139367],
		[-1.41899704578, -1.40545533491, -0.483119910044, -1.11585183184, 1.34934504315, -0.432930242154],
		[-2.5422552576, -4.07820651294, -1.73518916233, -0.800369827126, 2.55187805734, -0.169093037506],
		[-2.72917539045, -5.85888569981, -3.28653016681, 0.0353143965753, 2.71427307399, 0.0529312258093],
		[-1.52180685357, -6.18742188307, -5.68056949745, 1.08736075478, 1.33330005824, 0.230367898216],
		[0.693843044648, -5.03975857841, -7.17032428001, 2.15796803712, -0.592372556191, 0.253360537644],
		[3.46035824222, -2.41488977518, -6.33502991938, 2.80778639595, -2.20915830073, 0.0287826649899],
		[5.80486659771, -0.254529489474, -5.23240510083, 2.95911569661, -3.41619131684, -0.169334361816],
		[7.54743437683, 1.43855144176, -2.71397554699, 2.7727483063, -4.29897526371, -0.331608570583],
		[8.76727149074, 2.94383846414, -0.187925068392, 2.19438353812, -4.93093954588, -0.464468145224],
		[8.85144239896, 4.92394875873, 1.34916061019, 0.54549904057, -5.14283530688, -0.573244284032],
		[6.82311418653, 5.44959059523, 3.94912395845, -1.30853866102, -3.33370698306, -0.662302480009],
		[4.08009264104, 5.10103678313, 6.94836395588, -2.94520180654, -0.764424014411, -0.735195680896],
		[0.859764343595, 4.68625619598, 9.36734272598, -4.35512051998, 1.42347495019, -0.784962449961],
		[-2.29617659039, 2.51411740383, 8.94345480114, -5.42671086302, 3.18936688594, -0.553526228177],
		[-4.86250934292, 0.132308235983, 7.34727098289, -5.90861290221, 4.50129360858, -0.260874090987],
		[-6.77153554682, -1.71396004278, 4.31280270062, -5.86794150524, 5.42792789475, -0.0206202919944],
		[-8.26737528831, -3.14918445592, 1.36120313212, -5.43188407684, 6.05668342342, 0.176087720454],
		[-9.05762671138, -4.86937298424, -0.579915104924, -4.12902634344, 6.46752923251, 0.337138594162],
		[-9.17571334396, -6.95405138423, -1.58461422162, -2.06485181171, 6.7123603964, 0.468995771491]]

	
	#Plot the time series by using
	'''
	import matplotlib.pylab as plt
	plt.plot(t,y)
	plt.xlabel('Time')
	plt.ylable()
	plt.show()
	'''	

	#----------------------------------------
	#the function for example 1 as shown in Eq.1 of the paper
	#----------------------------------------
	def f(x):
		return - x
	def h(x):
		return math.tanh(x)

	reconstructed_A = network_reconstruction(x,A0,f,h)

		
	#Visualize the original adjacency matrix and the predicted one and compare you can use
	'''
	import matplotlib.pylab as plt
	plt.subplot(1,3,1)
	plt.set_cmap('bwr')
	plt.imshow(A0,interpolation='none', vmin=-10, vmax=10)
	plt.title('Original adjacency matrix')
	plt.subplot(1,3,2)
	plt.set_cmap('bwr')
	plt.imshow(reconstructed_A,interpolation='none', vmin=-10, vmax=10)
	plt.title('Reconstructed ajacency matrix')
	plt.subplot(1,3,3)
	plt.set_cmap('bwr')
	plt.imshow(np.abs(reconstructed_A-A0),interpolation='none', vmin=-10, vmax=10)
	plt.title('Difference')
	plt.show()
	'''
	

if __name__ == "__main__":
	example1()


